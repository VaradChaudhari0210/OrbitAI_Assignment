// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  essays        Essay[]
  createdAt     DateTime  @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// AI Essay Editor models
model Essay {
  id               String     @id @default(cuid())
  title            String
  content          String     @db.Text
  targetUniversity String?
  userId           String
  user             User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  analyses         Analysis[]
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}

model Analysis {
  id              String       @id @default(cuid())
  essayId         String
  essay           Essay        @relation(fields: [essayId], references: [id], onDelete: Cascade)
  clarityScore    Int
  impactScore     Int
  toneScore       Int
  feedbackSummary String       @db.Text
  suggestions     Suggestion[]
  createdAt       DateTime     @default(now())
}

model Suggestion {
  id           String   @id @default(cuid())
  analysisId   String
  analysis     Analysis @relation(fields: [analysisId], references: [id], onDelete: Cascade)
  originalText String   @db.Text
  feedback     String   @db.Text
  category     String
  createdAt    DateTime @default(now())
}
